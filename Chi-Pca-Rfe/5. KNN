{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"15qXMaDXFEcHIYjoGAu-RFQy8ESeKsTdF","timestamp":1704310045545}]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["# Import Data"],"metadata":{"id":"QnCE6nHdIP91"}},{"cell_type":"code","execution_count":1,"metadata":{"id":"TuRyi4N57nJy","executionInfo":{"status":"ok","timestamp":1728242613877,"user_tz":-360,"elapsed":4694,"user":{"displayName":"Saifur Rahman","userId":"15512649432170958115"}}},"outputs":[],"source":["# Importing libraries\n","import pandas as pd\n","import numpy as np\n","import matplotlib.pyplot as plt\n","from sklearn import svm, metrics\n","from sklearn.model_selection import train_test_split\n","from sklearn.metrics import classification_report, confusion_matrix, roc_curve, auc\n","from sklearn.ensemble import RandomForestClassifier\n","from sklearn.tree import DecisionTreeClassifier\n","from sklearn.neighbors import KNeighborsClassifier\n","from sklearn.svm import SVC\n","from sklearn.linear_model import LogisticRegression\n","from sklearn.naive_bayes import GaussianNB"]},{"cell_type":"code","source":["from google.colab import drive\n","drive.mount('/content/drive')"],"metadata":{"id":"-YJiM2MBqeWu","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1728242653673,"user_tz":-360,"elapsed":39828,"user":{"displayName":"Saifur Rahman","userId":"15512649432170958115"}},"outputId":"69eb8cb1-df4d-40ed-84cb-47816da07d23"},"execution_count":2,"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}]},{"cell_type":"code","source":["# Load the dataset\n","file_path = '/content/drive/MyDrive/Colab Notebooks/Mental Health Research/Chi-PCA-Rfe/'\n","data = pd.read_csv(file_path + 'rearranged_data_rfe_rf.csv')\n","data.columns"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"o7UMMcjM8F4-","executionInfo":{"status":"ok","timestamp":1728242656403,"user_tz":-360,"elapsed":2734,"user":{"displayName":"Saifur Rahman","userId":"15512649432170958115"}},"outputId":"1315ccc5-885d-4fac-f413-1046b4727176"},"execution_count":3,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Index(['PCA 1', 'PCA 10', 'PCA 8', 'PCA 25', 'PCA 4', 'PCA 2', 'PCA 24',\n","       'PCA 27', 'PCA 20', 'PCA 19', 'PCA 6', 'PCA 11', 'PCA 21', 'PCA 16',\n","       'PCA 13', 'PCA 14', 'PCA 7', 'PCA 18', 'PCA 9', 'PCA 26', 'PCA 22',\n","       'PCA 12', 'PCA 15', 'PCA 3', 'PCA 23', 'PCA 5', 'PCA 17', 'Class'],\n","      dtype='object')"]},"metadata":{},"execution_count":3}]},{"cell_type":"code","source":["data.shape[1]"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"kTNJYci74pFp","executionInfo":{"status":"ok","timestamp":1728242656403,"user_tz":-360,"elapsed":38,"user":{"displayName":"Saifur Rahman","userId":"15512649432170958115"}},"outputId":"c905a7c7-e3dc-4db6-fa5f-9edbc80c37d6"},"execution_count":4,"outputs":[{"output_type":"execute_result","data":{"text/plain":["28"]},"metadata":{},"execution_count":4}]},{"cell_type":"markdown","source":["# Select No. of Features"],"metadata":{"id":"Fmj1nuU1HsA5"}},{"cell_type":"code","source":["feat_knn = 14"],"metadata":{"id":"owH6fXUFHvWh","executionInfo":{"status":"ok","timestamp":1728242656404,"user_tz":-360,"elapsed":36,"user":{"displayName":"Saifur Rahman","userId":"15512649432170958115"}}},"execution_count":5,"outputs":[]},{"cell_type":"markdown","source":["# KNN"],"metadata":{"id":"iUlm9BCJ_oNb"}},{"cell_type":"code","source":["# Load the dataset\n","#data = pd.read_csv('rearranged_data_rfe_rf.csv')\n","\n","X = data.iloc[:, :feat_knn].values # Features\n","y = data.iloc[:, -1].values # Labels\n","\n","# Splitting the dataset into train and test sets\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20, random_state=143017)"],"metadata":{"id":"-LHr4o8u_Ml9","executionInfo":{"status":"ok","timestamp":1728242656404,"user_tz":-360,"elapsed":34,"user":{"displayName":"Saifur Rahman","userId":"15512649432170958115"}}},"execution_count":6,"outputs":[]},{"cell_type":"code","source":["# Scaling the dataset\n","from sklearn.preprocessing import MinMaxScaler\n","scaling = MinMaxScaler(feature_range=(-1,1)).fit(X_train)\n","X_train = scaling.transform(X_train)\n","X_test = scaling.transform(X_test)"],"metadata":{"id":"XDK4TEG5_5sQ","executionInfo":{"status":"ok","timestamp":1728242656405,"user_tz":-360,"elapsed":33,"user":{"displayName":"Saifur Rahman","userId":"15512649432170958115"}}},"execution_count":7,"outputs":[]},{"cell_type":"code","source":["# Create a Random Forest classifier and fit it to the training set\n","classifier = KNeighborsClassifier()\n","classifier.fit(X_train, y_train)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":80},"id":"8855TUwq_8Db","executionInfo":{"status":"ok","timestamp":1728242656405,"user_tz":-360,"elapsed":31,"user":{"displayName":"Saifur Rahman","userId":"15512649432170958115"}},"outputId":"7501603c-61ed-4457-fe9a-b555d3548326"},"execution_count":8,"outputs":[{"output_type":"execute_result","data":{"text/plain":["KNeighborsClassifier()"],"text/html":["<style>#sk-container-id-1 {\n","  /* Definition of color scheme common for light and dark mode */\n","  --sklearn-color-text: black;\n","  --sklearn-color-line: gray;\n","  /* Definition of color scheme for unfitted estimators */\n","  --sklearn-color-unfitted-level-0: #fff5e6;\n","  --sklearn-color-unfitted-level-1: #f6e4d2;\n","  --sklearn-color-unfitted-level-2: #ffe0b3;\n","  --sklearn-color-unfitted-level-3: chocolate;\n","  /* Definition of color scheme for fitted estimators */\n","  --sklearn-color-fitted-level-0: #f0f8ff;\n","  --sklearn-color-fitted-level-1: #d4ebff;\n","  --sklearn-color-fitted-level-2: #b3dbfd;\n","  --sklearn-color-fitted-level-3: cornflowerblue;\n","\n","  /* Specific color for light theme */\n","  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n","  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n","  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n","  --sklearn-color-icon: #696969;\n","\n","  @media (prefers-color-scheme: dark) {\n","    /* Redefinition of color scheme for dark theme */\n","    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n","    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n","    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n","    --sklearn-color-icon: #878787;\n","  }\n","}\n","\n","#sk-container-id-1 {\n","  color: var(--sklearn-color-text);\n","}\n","\n","#sk-container-id-1 pre {\n","  padding: 0;\n","}\n","\n","#sk-container-id-1 input.sk-hidden--visually {\n","  border: 0;\n","  clip: rect(1px 1px 1px 1px);\n","  clip: rect(1px, 1px, 1px, 1px);\n","  height: 1px;\n","  margin: -1px;\n","  overflow: hidden;\n","  padding: 0;\n","  position: absolute;\n","  width: 1px;\n","}\n","\n","#sk-container-id-1 div.sk-dashed-wrapped {\n","  border: 1px dashed var(--sklearn-color-line);\n","  margin: 0 0.4em 0.5em 0.4em;\n","  box-sizing: border-box;\n","  padding-bottom: 0.4em;\n","  background-color: var(--sklearn-color-background);\n","}\n","\n","#sk-container-id-1 div.sk-container {\n","  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n","     but bootstrap.min.css set `[hidden] { display: none !important; }`\n","     so we also need the `!important` here to be able to override the\n","     default hidden behavior on the sphinx rendered scikit-learn.org.\n","     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n","  display: inline-block !important;\n","  position: relative;\n","}\n","\n","#sk-container-id-1 div.sk-text-repr-fallback {\n","  display: none;\n","}\n","\n","div.sk-parallel-item,\n","div.sk-serial,\n","div.sk-item {\n","  /* draw centered vertical line to link estimators */\n","  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n","  background-size: 2px 100%;\n","  background-repeat: no-repeat;\n","  background-position: center center;\n","}\n","\n","/* Parallel-specific style estimator block */\n","\n","#sk-container-id-1 div.sk-parallel-item::after {\n","  content: \"\";\n","  width: 100%;\n","  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n","  flex-grow: 1;\n","}\n","\n","#sk-container-id-1 div.sk-parallel {\n","  display: flex;\n","  align-items: stretch;\n","  justify-content: center;\n","  background-color: var(--sklearn-color-background);\n","  position: relative;\n","}\n","\n","#sk-container-id-1 div.sk-parallel-item {\n","  display: flex;\n","  flex-direction: column;\n","}\n","\n","#sk-container-id-1 div.sk-parallel-item:first-child::after {\n","  align-self: flex-end;\n","  width: 50%;\n","}\n","\n","#sk-container-id-1 div.sk-parallel-item:last-child::after {\n","  align-self: flex-start;\n","  width: 50%;\n","}\n","\n","#sk-container-id-1 div.sk-parallel-item:only-child::after {\n","  width: 0;\n","}\n","\n","/* Serial-specific style estimator block */\n","\n","#sk-container-id-1 div.sk-serial {\n","  display: flex;\n","  flex-direction: column;\n","  align-items: center;\n","  background-color: var(--sklearn-color-background);\n","  padding-right: 1em;\n","  padding-left: 1em;\n","}\n","\n","\n","/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n","clickable and can be expanded/collapsed.\n","- Pipeline and ColumnTransformer use this feature and define the default style\n","- Estimators will overwrite some part of the style using the `sk-estimator` class\n","*/\n","\n","/* Pipeline and ColumnTransformer style (default) */\n","\n","#sk-container-id-1 div.sk-toggleable {\n","  /* Default theme specific background. It is overwritten whether we have a\n","  specific estimator or a Pipeline/ColumnTransformer */\n","  background-color: var(--sklearn-color-background);\n","}\n","\n","/* Toggleable label */\n","#sk-container-id-1 label.sk-toggleable__label {\n","  cursor: pointer;\n","  display: block;\n","  width: 100%;\n","  margin-bottom: 0;\n","  padding: 0.5em;\n","  box-sizing: border-box;\n","  text-align: center;\n","}\n","\n","#sk-container-id-1 label.sk-toggleable__label-arrow:before {\n","  /* Arrow on the left of the label */\n","  content: \"▸\";\n","  float: left;\n","  margin-right: 0.25em;\n","  color: var(--sklearn-color-icon);\n","}\n","\n","#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {\n","  color: var(--sklearn-color-text);\n","}\n","\n","/* Toggleable content - dropdown */\n","\n","#sk-container-id-1 div.sk-toggleable__content {\n","  max-height: 0;\n","  max-width: 0;\n","  overflow: hidden;\n","  text-align: left;\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-0);\n","}\n","\n","#sk-container-id-1 div.sk-toggleable__content.fitted {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-0);\n","}\n","\n","#sk-container-id-1 div.sk-toggleable__content pre {\n","  margin: 0.2em;\n","  border-radius: 0.25em;\n","  color: var(--sklearn-color-text);\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-0);\n","}\n","\n","#sk-container-id-1 div.sk-toggleable__content.fitted pre {\n","  /* unfitted */\n","  background-color: var(--sklearn-color-fitted-level-0);\n","}\n","\n","#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n","  /* Expand drop-down */\n","  max-height: 200px;\n","  max-width: 100%;\n","  overflow: auto;\n","}\n","\n","#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n","  content: \"▾\";\n","}\n","\n","/* Pipeline/ColumnTransformer-specific style */\n","\n","#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n","  color: var(--sklearn-color-text);\n","  background-color: var(--sklearn-color-unfitted-level-2);\n","}\n","\n","#sk-container-id-1 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n","  background-color: var(--sklearn-color-fitted-level-2);\n","}\n","\n","/* Estimator-specific style */\n","\n","/* Colorize estimator box */\n","#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-2);\n","}\n","\n","#sk-container-id-1 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-2);\n","}\n","\n","#sk-container-id-1 div.sk-label label.sk-toggleable__label,\n","#sk-container-id-1 div.sk-label label {\n","  /* The background is the default theme color */\n","  color: var(--sklearn-color-text-on-default-background);\n","}\n","\n","/* On hover, darken the color of the background */\n","#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {\n","  color: var(--sklearn-color-text);\n","  background-color: var(--sklearn-color-unfitted-level-2);\n","}\n","\n","/* Label box, darken color on hover, fitted */\n","#sk-container-id-1 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n","  color: var(--sklearn-color-text);\n","  background-color: var(--sklearn-color-fitted-level-2);\n","}\n","\n","/* Estimator label */\n","\n","#sk-container-id-1 div.sk-label label {\n","  font-family: monospace;\n","  font-weight: bold;\n","  display: inline-block;\n","  line-height: 1.2em;\n","}\n","\n","#sk-container-id-1 div.sk-label-container {\n","  text-align: center;\n","}\n","\n","/* Estimator-specific */\n","#sk-container-id-1 div.sk-estimator {\n","  font-family: monospace;\n","  border: 1px dotted var(--sklearn-color-border-box);\n","  border-radius: 0.25em;\n","  box-sizing: border-box;\n","  margin-bottom: 0.5em;\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-0);\n","}\n","\n","#sk-container-id-1 div.sk-estimator.fitted {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-0);\n","}\n","\n","/* on hover */\n","#sk-container-id-1 div.sk-estimator:hover {\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-2);\n","}\n","\n","#sk-container-id-1 div.sk-estimator.fitted:hover {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-2);\n","}\n","\n","/* Specification for estimator info (e.g. \"i\" and \"?\") */\n","\n","/* Common style for \"i\" and \"?\" */\n","\n",".sk-estimator-doc-link,\n","a:link.sk-estimator-doc-link,\n","a:visited.sk-estimator-doc-link {\n","  float: right;\n","  font-size: smaller;\n","  line-height: 1em;\n","  font-family: monospace;\n","  background-color: var(--sklearn-color-background);\n","  border-radius: 1em;\n","  height: 1em;\n","  width: 1em;\n","  text-decoration: none !important;\n","  margin-left: 1ex;\n","  /* unfitted */\n","  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n","  color: var(--sklearn-color-unfitted-level-1);\n","}\n","\n",".sk-estimator-doc-link.fitted,\n","a:link.sk-estimator-doc-link.fitted,\n","a:visited.sk-estimator-doc-link.fitted {\n","  /* fitted */\n","  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n","  color: var(--sklearn-color-fitted-level-1);\n","}\n","\n","/* On hover */\n","div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",".sk-estimator-doc-link:hover,\n","div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",".sk-estimator-doc-link:hover {\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-3);\n","  color: var(--sklearn-color-background);\n","  text-decoration: none;\n","}\n","\n","div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",".sk-estimator-doc-link.fitted:hover,\n","div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",".sk-estimator-doc-link.fitted:hover {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-3);\n","  color: var(--sklearn-color-background);\n","  text-decoration: none;\n","}\n","\n","/* Span, style for the box shown on hovering the info icon */\n",".sk-estimator-doc-link span {\n","  display: none;\n","  z-index: 9999;\n","  position: relative;\n","  font-weight: normal;\n","  right: .2ex;\n","  padding: .5ex;\n","  margin: .5ex;\n","  width: min-content;\n","  min-width: 20ex;\n","  max-width: 50ex;\n","  color: var(--sklearn-color-text);\n","  box-shadow: 2pt 2pt 4pt #999;\n","  /* unfitted */\n","  background: var(--sklearn-color-unfitted-level-0);\n","  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n","}\n","\n",".sk-estimator-doc-link.fitted span {\n","  /* fitted */\n","  background: var(--sklearn-color-fitted-level-0);\n","  border: var(--sklearn-color-fitted-level-3);\n","}\n","\n",".sk-estimator-doc-link:hover span {\n","  display: block;\n","}\n","\n","/* \"?\"-specific style due to the `<a>` HTML tag */\n","\n","#sk-container-id-1 a.estimator_doc_link {\n","  float: right;\n","  font-size: 1rem;\n","  line-height: 1em;\n","  font-family: monospace;\n","  background-color: var(--sklearn-color-background);\n","  border-radius: 1rem;\n","  height: 1rem;\n","  width: 1rem;\n","  text-decoration: none;\n","  /* unfitted */\n","  color: var(--sklearn-color-unfitted-level-1);\n","  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n","}\n","\n","#sk-container-id-1 a.estimator_doc_link.fitted {\n","  /* fitted */\n","  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n","  color: var(--sklearn-color-fitted-level-1);\n","}\n","\n","/* On hover */\n","#sk-container-id-1 a.estimator_doc_link:hover {\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-3);\n","  color: var(--sklearn-color-background);\n","  text-decoration: none;\n","}\n","\n","#sk-container-id-1 a.estimator_doc_link.fitted:hover {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-3);\n","}\n","</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>KNeighborsClassifier()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;&nbsp;KNeighborsClassifier<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.5/modules/generated/sklearn.neighbors.KNeighborsClassifier.html\">?<span>Documentation for KNeighborsClassifier</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></label><div class=\"sk-toggleable__content fitted\"><pre>KNeighborsClassifier()</pre></div> </div></div></div></div>"]},"metadata":{},"execution_count":8}]},{"cell_type":"code","source":["# Making predictions\n","y_pred = classifier.predict(X_test)"],"metadata":{"id":"jlotVgtZ_9li","executionInfo":{"status":"ok","timestamp":1728242656406,"user_tz":-360,"elapsed":27,"user":{"displayName":"Saifur Rahman","userId":"15512649432170958115"}}},"execution_count":9,"outputs":[]},{"cell_type":"code","source":["# Printing confusion matrix\n","cm = confusion_matrix(y_test, y_pred)\n","print(\"Confusion matrix:\\n\", cm)\n","n_classes = cm.shape[0]\n","class_accuracy = []\n","for i in range(n_classes):\n","    class_accuracy.append(cm[i,i]/np.sum(cm[i,:]))\n","print(\"Accuracy of each class: \", class_accuracy)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"klFUAwGx__sA","executionInfo":{"status":"ok","timestamp":1728242656406,"user_tz":-360,"elapsed":26,"user":{"displayName":"Saifur Rahman","userId":"15512649432170958115"}},"outputId":"03031b4a-1488-4e4a-f35c-ab00fe84c729"},"execution_count":10,"outputs":[{"output_type":"stream","name":"stdout","text":["Confusion matrix:\n"," [[ 6  6  0]\n"," [ 3 26  1]\n"," [ 0  4 17]]\n","Accuracy of each class:  [0.5, 0.8666666666666667, 0.8095238095238095]\n"]}]},{"cell_type":"code","source":["# Plotting confusion matrix\n","plt.figure(figsize=(16, 12))\n","plt.imshow(cm, interpolation='nearest', cmap='Oranges')\n","plt.title('Confusion matrix')\n","plt.colorbar()\n","plt.xlabel('Predicted Class')\n","plt.ylabel('Actual Class')\n","tick_marks = np.arange(len(set(y)))\n","plt.xticks(tick_marks, sorted(set(y)))\n","plt.yticks(tick_marks, sorted(set(y)))\n","for i in range(len(cm)):\n","    for j in range(len(cm[0])):\n","        plt.annotate(str(cm[i][j]), xy=(j, i),\n","                     horizontalalignment='center',\n","                     verticalalignment='center',\n","                     color='white' if cm[i][j] > (0.5*cm.max()) else 'black',\n","                     fontsize=32)\n","plt.rcParams.update({'font.size': 24})\n","plt.savefig('cm-knn.png')\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"i24fmevQABwg","executionInfo":{"status":"ok","timestamp":1728242657292,"user_tz":-360,"elapsed":908,"user":{"displayName":"Saifur Rahman","userId":"15512649432170958115"}},"outputId":"67880a7d-3251-4907-a030-7c44dbdeed56"},"execution_count":11,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1600x1200 with 2 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["# Printing classification report\n","print(\"Classification report:\\n\", classification_report(y_test, y_pred))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"d89W52yNAEwg","executionInfo":{"status":"ok","timestamp":1728242657292,"user_tz":-360,"elapsed":15,"user":{"displayName":"Saifur Rahman","userId":"15512649432170958115"}},"outputId":"882dad82-9de4-44d2-d48e-efe05db0576a"},"execution_count":12,"outputs":[{"output_type":"stream","name":"stdout","text":["Classification report:\n","               precision    recall  f1-score   support\n","\n","           0       0.67      0.50      0.57        12\n","           1       0.72      0.87      0.79        30\n","           2       0.94      0.81      0.87        21\n","\n","    accuracy                           0.78        63\n","   macro avg       0.78      0.73      0.74        63\n","weighted avg       0.79      0.78      0.77        63\n","\n"]}]},{"cell_type":"code","source":["# Calculating metrics\n","accuracy_knn = metrics.accuracy_score(y_test, y_pred)\n","precision_knn = metrics.precision_score(y_test, y_pred, average=None)\n","recall_knn = metrics.recall_score(y_test, y_pred, average=None)\n","f1_score_knn = metrics.f1_score(y_test, y_pred, average=None)"],"metadata":{"id":"0TPSuyIuAGbr","executionInfo":{"status":"ok","timestamp":1728242657293,"user_tz":-360,"elapsed":14,"user":{"displayName":"Saifur Rahman","userId":"15512649432170958115"}}},"execution_count":13,"outputs":[]},{"cell_type":"code","source":["# Printing metrics rounded to two decimal points\n","print(\"Accuracy:\", round(accuracy_knn, 4))\n","print(\"Precision:\", [round(p, 4) for p in precision_knn], round(sum(precision_knn) / len(precision_knn), 4))\n","print(\"Recall:\", [round(r, 4) for r in recall_knn], round(sum(recall_knn) / len(recall_knn), 4))\n","print(\"F1-Score:\", [round(f, 4) for f in f1_score_knn], round(sum(f1_score_knn) / len(f1_score_knn), 4))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"6hagDPAGAISX","executionInfo":{"status":"ok","timestamp":1728242657293,"user_tz":-360,"elapsed":14,"user":{"displayName":"Saifur Rahman","userId":"15512649432170958115"}},"outputId":"44afa93d-31be-4bbf-c1c1-0ff37149b705"},"execution_count":14,"outputs":[{"output_type":"stream","name":"stdout","text":["Accuracy: 0.7778\n","Precision: [0.6667, 0.7222, 0.9444] 0.7778\n","Recall: [0.5, 0.8667, 0.8095] 0.7254\n","F1-Score: [0.5714, 0.7879, 0.8718] 0.7437\n"]}]}]}